// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name,
    last_name,
    user_name,
    email,
    role,
    password
)   VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING user_id, user_name, first_name, last_name, email, password, password_changed_at, is_email_verified, role, created_at, updated_at
`

type CreateUserParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	UserName  string `json:"user_name"`
	Email     string `json:"email"`
	Role      string `json:"role"`
	Password  string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.UserName,
		arg.Email,
		arg.Role,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.IsEmailVerified,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, first_name, last_name, email, password, password_changed_at, is_email_verified, role, created_at, updated_at FROM users
WHERE user_id =  $1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.IsEmailVerified,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    first_name = COLAESCE($1, first_name),
    last_name = COLAESCE($2, last_name),
    user_name = COLAESCE($3, user_name),
    email = COLAESCE($4, email),
    is_email_verified = COALESCE($5,is_email_verified)
WHERE
    user_id = $6    
RETURNING user_id, user_name, first_name, last_name, email, password, password_changed_at, is_email_verified, role, created_at, updated_at
`

type UpdateUserParams struct {
	FirstName       interface{} `json:"first_name"`
	LastName        interface{} `json:"last_name"`
	UserName        interface{} `json:"user_name"`
	Email           interface{} `json:"email"`
	IsEmailVerified pgtype.Bool `json:"is_email_verified"`
	UserID          int64       `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.UserName,
		arg.Email,
		arg.IsEmailVerified,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.IsEmailVerified,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
